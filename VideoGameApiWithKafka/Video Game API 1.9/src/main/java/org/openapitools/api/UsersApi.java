/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.User;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-21T13:18:55.670880400-07:00[America/Denver]")
@Validated
@Tag(name = "users", description = "the users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /users/{userId}/{gameId} : Add a Game to a User
     *
     * @param userId The id of the user to add game to (required)
     * @param gameId The id of the game to add to user (required)
     * @return Null response (status code 201)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "addGameUser",
        summary = "Add a Game to a User",
        tags = { "users", "games" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Null response"),
            @ApiResponse(responseCode = "default", description = "unexpected error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/{userId}/{gameId}"
    )
    
    default ResponseEntity<Void> addGameUser(
        @Parameter(name = "userId", description = "The id of the user to add game to", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId,
        @Parameter(name = "gameId", description = "The id of the game to add to user", required = true, in = ParameterIn.PATH) @PathVariable("gameId") String gameId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users : Create a User
     *
     * @param user  (required)
     * @return Null response (status code 201)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "createUser",
        summary = "Create a User",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Null response"),
            @ApiResponse(responseCode = "default", description = "unexpected error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createUser(
        @Parameter(name = "User", description = "", required = true) @Valid @RequestBody User user
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/{userId}/{gameId} : Remove a Game from a User
     *
     * @param userId The id of the user to delete game from (required)
     * @param gameId The id of the game to delete from user (required)
     * @return Null response (status code 201)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteGameUser",
        summary = "Remove a Game from a User",
        tags = { "users", "games" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Null response"),
            @ApiResponse(responseCode = "default", description = "unexpected error")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}/{gameId}"
    )
    
    default ResponseEntity<Void> deleteGameUser(
        @Parameter(name = "userId", description = "The id of the user to delete game from", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId,
        @Parameter(name = "gameId", description = "The id of the game to delete from user", required = true, in = ParameterIn.PATH) @PathVariable("gameId") String gameId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/{userId} : Delete one User
     *
     * @param userId The id of the user to delete (required)
     * @return Null response (status code 204)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Delete one User",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Null response"),
            @ApiResponse(responseCode = "default", description = "unexpected error")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}"
    )
    
    default ResponseEntity<Void> deleteUser(
        @Parameter(name = "userId", description = "The id of the user to delete", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{userId} : Get One User
     *
     * @param userId The id of the user to get (required)
     * @return One User Object (status code 200)
     */
    @Operation(
        operationId = "getOneUser",
        summary = "Get One User",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "One User Object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<User> getOneUser(
        @Parameter(name = "userId", description = "The id of the user to get", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"zip\" : \"zip\", \"address\" : \"address\", \"city\" : \"city\", \"name\" : \"name\", \"games\" : [ null, null ], \"id\" : 0, \"state\" : \"state\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users : List All Users
     *
     * @return A paged array of Users (status code 200)
     */
    @Operation(
        operationId = "listUsers",
        summary = "List All Users",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A paged array of Users", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<User>> listUsers(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"zip\" : \"zip\", \"address\" : \"address\", \"city\" : \"city\", \"name\" : \"name\", \"games\" : [ null, null ], \"id\" : 0, \"state\" : \"state\", \"email\" : \"email\" }, { \"zip\" : \"zip\", \"address\" : \"address\", \"city\" : \"city\", \"name\" : \"name\", \"games\" : [ null, null ], \"id\" : 0, \"state\" : \"state\", \"email\" : \"email\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /users/{userId} : Update Some User Attributes
     *
     * @param userId The id of the user to update (required)
     * @param user  (required)
     * @return Null response (status code 204)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateSomeUser",
        summary = "Update Some User Attributes",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Null response"),
            @ApiResponse(responseCode = "default", description = "unexpected error")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/users/{userId}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateSomeUser(
        @Parameter(name = "userId", description = "The id of the user to update", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId,
        @Parameter(name = "User", description = "", required = true) @Valid @RequestBody User user
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{userId} : Update all User Attributes
     *
     * @param userId The id of the user to update (required)
     * @param user  (required)
     * @return Null response (status code 204)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Update all User Attributes",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Null response"),
            @ApiResponse(responseCode = "default", description = "unexpected error")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{userId}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateUser(
        @Parameter(name = "userId", description = "The id of the user to update", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId,
        @Parameter(name = "User", description = "", required = true) @Valid @RequestBody User user
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
