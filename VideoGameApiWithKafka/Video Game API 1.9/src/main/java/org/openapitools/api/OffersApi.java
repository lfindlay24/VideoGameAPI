/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Offer;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-21T13:18:55.670880400-07:00[America/Denver]")
@Validated
@Tag(name = "users", description = "the users API")
public interface OffersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /offers/{offerId}/{gameId}{isSent} : Add a game to a offer
     *
     * @param offerId The id of the offer to add a Game to (required)
     * @param gameId The id of the game to add to offer (required)
     * @param isSent boolean to determine if game is being sent or not (required)
     * @return Null response (status code 201)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "addGameOffer",
        summary = "Add a game to a offer",
        tags = { "users", "games", "offers" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Null response"),
            @ApiResponse(responseCode = "default", description = "unexpected error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/offers/{offerId}/{gameId}/{isSent}"
    )
    
    default ResponseEntity<Void> addGameOffer(
        @Parameter(name = "offerId", description = "The id of the offer to add a Game to", required = true, in = ParameterIn.PATH) @PathVariable("offerId") String offerId,
        @Parameter(name = "gameId", description = "The id of the game to add to offer", required = true, in = ParameterIn.PATH) @PathVariable("gameId") String gameId,
        @Parameter(name = "isSent", description = "boolean to determine if game is being sent or not", required = true, in = ParameterIn.PATH) @PathVariable("isSent") Boolean isSent
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /offers : Create an Offer
     *
     * @param offer  (required)
     * @return Null response (status code 201)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "createOffer",
        summary = "Create an Offer",
        tags = { "offers" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Null response"),
            @ApiResponse(responseCode = "default", description = "unexpected error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/offers",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createOffer(
        @Parameter(name = "Offer", description = "", required = true) @Valid @RequestBody Offer offer
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /offers/{offerId}/{gameId}{isSent} : Remove a Game from a User
     *
     * @param offerId The id of the offer to delete a Game from (required)
     * @param gameId The id of the game to delete from offer (required)
     * @param isSent boolean to determine if game is being sent or not (required)
     * @return Null response (status code 201)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteGameOffer",
        summary = "Remove a Game from a Offer",
        tags = { "users", "games" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Null response"),
            @ApiResponse(responseCode = "default", description = "unexpected error")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/offers/{offerId}/{gameId}/{isSent}"
    )
    
    default ResponseEntity<Void> deleteGameOffer(
        @Parameter(name = "offerId", description = "The id of the offer to delete a Game from", required = true, in = ParameterIn.PATH) @PathVariable("offerId") String offerId,
        @Parameter(name = "gameId", description = "The id of the game to delete from offer", required = true, in = ParameterIn.PATH) @PathVariable("gameId") String gameId,
        @Parameter(name = "isSent", description = "boolean to determine if game is being sent or not", required = true, in = ParameterIn.PATH) @PathVariable("isSent") Boolean isSent
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /offers/{offerId} : Delete one Offer
     *
     * @param offerId The id of the offer to delete (required)
     * @return Null response (status code 204)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteOffer",
        summary = "Delete one Offer",
        tags = { "offers" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Null response"),
            @ApiResponse(responseCode = "default", description = "unexpected error")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/offers/{offerId}"
    )
    
    default ResponseEntity<Void> deleteOffer(
        @Parameter(name = "offerId", description = "The id of the offer to delete", required = true, in = ParameterIn.PATH) @PathVariable("offerId") String offerId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /offers/{offerId} : Get One Offer
     *
     * @param offerId The id of the offer to get (required)
     * @return One Offer Object (status code 200)
     */
    @Operation(
        operationId = "getOneOffer",
        summary = "Get One Offer",
        tags = { "offers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "One Offer Object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Offer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/offers/{offerId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Offer> getOneOffer(
        @Parameter(name = "offerId", description = "The id of the offer to get", required = true, in = ParameterIn.PATH) @PathVariable("offerId") String offerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"toUser\" : [ null, null ], \"sentGames\" : [ null, null ], \"fromUser\" : [ null, null ], \"receivedGames\" : [ null, null ], \"timeCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"state\" : \"state\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /offers : List All Offers
     *
     * @return A paged array of Offers (status code 200)
     */
    @Operation(
        operationId = "listOffers",
        summary = "List All Offers",
        tags = { "offers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A paged array of Offers", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Offer.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/offers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Offer>> listOffers(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"toUser\" : [ null, null ], \"sentGames\" : [ null, null ], \"fromUser\" : [ null, null ], \"receivedGames\" : [ null, null ], \"timeCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"state\" : \"state\" }, { \"toUser\" : [ null, null ], \"sentGames\" : [ null, null ], \"fromUser\" : [ null, null ], \"receivedGames\" : [ null, null ], \"timeCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"state\" : \"state\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /offers/{offerId} : Update all Offer Attributes
     *
     * @param offerId The id of the offer to update (required)
     * @param offer  (required)
     * @return Null response (status code 204)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateOffer",
        summary = "Update all Offer Attributes",
        tags = { "offers" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Null response"),
            @ApiResponse(responseCode = "default", description = "unexpected error")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/offers/{offerId}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateOffer(
        @Parameter(name = "offerId", description = "The id of the offer to update", required = true, in = ParameterIn.PATH) @PathVariable("offerId") String offerId,
        @Parameter(name = "Offer", description = "", required = true) @Valid @RequestBody Offer offer
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /offers/{offerId} : Update Some offer Attributes
     *
     * @param offerId The id of the offer to update (required)
     * @param offer  (required)
     * @return Null response (status code 204)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateSomeOffer",
        summary = "Update Some offer Attributes",
        tags = { "offers" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Null response"),
            @ApiResponse(responseCode = "default", description = "unexpected error")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/offers/{offerId}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateSomeOffer(
        @Parameter(name = "offerId", description = "The id of the offer to update", required = true, in = ParameterIn.PATH) @PathVariable("offerId") String offerId,
        @Parameter(name = "Offer", description = "", required = true) @Valid @RequestBody Offer offer
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
